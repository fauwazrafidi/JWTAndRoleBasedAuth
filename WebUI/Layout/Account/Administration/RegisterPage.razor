@page "/administration/account/identity/add-user"
@using Application.DTOs.Response.Account
@using Microsoft.AspNetCore.Authorization

@* @attribute [Authorize(Roles = "Admin")] *@

<AuthorizeView Roles="Admin">
    <Authorized Context="authContext">
        <div class="row">
            <div class="col-lg-4"></div>
            <div class="col-lg-4">
                <EditForm Model="RegisterModel" OnValidSubmit="RegisterAsync">
                    <div class="card border-primary shadow-lg text-dark p-5" style="opacity: 0.8; min-width: 350px; border-radius: 24px;">
                        <div class="card-header text-dark fs-4 border-primary">Add User</div>
                        <div class="card-body" style="opacity: 1;">
                            <DataAnnotationsValidator />
                            <FloatingText class="form-control mb-3" Label="Full Name" Placeholder="John" @bind-Value="RegisterModel.Name" />
                            <FloatingText class="form-control mb-3" Label="Email Address" Placeholder="JohnDoe@email.com" @bind-Value="RegisterModel.EmailAddress" />
                            <label class="form-label">Select Role</label>
                            @if (AvailableRoles != null)
                            {
                                <InputSelect @bind-Value="RegisterModel.Role" class="form-select mb-3">
                                    <option>Select Role</option>
                                    @foreach (var role in AvailableRoles!)
                                    {
                                        <option value="@role.Name">@role.Name</option>
                                    }
                                </InputSelect>
                            }
                            else
                            {
                                <p>Loading roles...</p>
                            }
                            <FloatingText Label="User Password" Type="@PasswordType" class="form-control" @bind-Value="RegisterModel.Password" />
                            <FloatingText Label="Confirm Password" Type="@PasswordType" class="form-control" @bind-Value="RegisterModel.ConfirmPassword" />
                            <a class="btn btn-link text-decoration-none float-end" style="margin-top: -20px;" @onclick="ChangePasswordType"><small>@DisplayText</small></a>
                            <div class="form-group align-content-end">
                                <button class="float-end btn btn-success mt-4 w-50" type="submit" style="position:absolute; right: 0; margin: 2px;">Create Account</button>

                            </div>
                            <hr class="text-primary" />

                        </div>
                        <div class="card-footer mt-5">
                            <ValidationSummary class="form-control text-danger text-decoration-none p-4" style="list-style: lower-latin; text-align: left;" />
                        </div>
                    </div>
                </EditForm>
            </div>
            <div class="col-lg-4"></div>
        </div>
        <NetcodeHubModal @bind-Open="IsOpen" Actions="ButtonActions" BootstrapClass="@BorderClass" CustomStyle="min-width: 250px; max-width: 300px;">
            <ContentTemplate>
                <span class="text-center text-muted">
                    <div class="card border-@BorderClass">
                        <div class="card-header">Information</div>
                        <div class="card-body text-muted">@Message</div>
                    </div>
                </span>
            </ContentTemplate>
            <ButtonTemplate>
                <div class="d-flex justify-content-center align-content-center">
                    <button class="@ButtonClass btn-sm" value="ok" style="margin-right:5px;">Okay</button>
                </div>
            </ButtonTemplate>
        </NetcodeHubModal>
    </Authorized>
    <NotAuthorized>
        <!-- Optionally, show an access denied message for unauthorized users -->
        <div class="text-center mt-5">
            <h3>Access Denied</h3>
            <p>You are not authorized to view this page.</p>
        </div>
    </NotAuthorized>
</AuthorizeView>



@code {
    public bool IsOpen { get; set; }
    public string? SelectedAction { get; set; }
    string? Message;
    public bool IsOperationSuccess { get; set; }
    string? BorderClass = "border-success rounded p-2 ml-2 mr-2";
    string? ButtonClass = "btn btn-success";
    private CreateAccountDTO RegisterModel { get; set; } = new();
    private IEnumerable<GetRoleDTO>? AvailableRoles { get; set; }

    protected override async Task OnInitializedAsync()
    {
        AvailableRoles = await accountService.GetRolesAsync();
        StateHasChanged();
    }

    private async Task RegisterAsync()
    {
        try
        {
            ResetButton();
            var response = await accountService.CreateAccountAsync(RegisterModel);
            if (response.Flag)
            {
                IsOperationSuccess = true;
                SuccessBorderAndButton();
                Message = response.Message;
                IsOpen = true;
            }
            else
            {
                IsOperationSuccess = false;
                Message = response.Message;
                DangerBorderAndButton();
                IsOpen = true;
            }
        }
        catch
        {
            DangerBorderAndButton();
            Message = "An unknown error occurred while processing your request. Please try again later.";
            IsOpen = true;
        }
    }

    void DangerBorderAndButton()
    {
        BorderClass = "border-danger rounded p-2 ml-2 mr-2";
        ButtonClass = "btn btn-danger";
    }

    void SuccessBorderAndButton()
    {
        BorderClass = "border-success rounded p-2 ml-2 mr-2";
        ButtonClass = "btn btn-success";
    }

    void ResetButton()
    {
        BorderClass = "border-success rounded p-2 ml-2 mr-2";
        ButtonClass = "btn btn-success";
    }
    void ButtonActions(string action)
    {
        SelectedAction = action;
        if (action == "ok")
        {
            IsOpen = false;
            if (IsOperationSuccess)
            {
                RegisterModel = new();
            }
        }
    }

    private string? PasswordType = "password";
    private bool PasswordState = true;
    private string? DisplayText = "Show Password";

    void ChangePasswordType()
    {
        PasswordState = !PasswordState;
        if (!PasswordState)
        {
            PasswordType = "text";
            DisplayText = "Hide Password";
        }
        else
        {
            PasswordType = "password";
            DisplayText = "Show Password";
        }
        
    }
}

