@using MudBlazor

@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject AuthenticationStateProvider AuthenticationStateProvider

<MudDialog>
    <TitleContent>Change Password</TitleContent>
    <DialogContent>
        <MudTextField Label="Current Password"
        @bind-Value="currentPassword"
        InputType="@PasswordInputCurrent"
        Required="true"
        Adornment="Adornment.End"
        AdornmentIcon="@(_showCurrentPassword ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff)"
        OnAdornmentClick="ToggleCurrentPasswordVisibility" />

        <MudTextField Label="New Password"
        @bind-Value="newPassword"
        InputType="@PasswordInputNew"
        Required="true"
        Adornment="Adornment.End"
        AdornmentIcon="@(_showNewPassword ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff)"
        OnAdornmentClick="ToggleNewPasswordVisibility" />

        <MudTextField Label="Confirm New Password"
        @bind-Value="confirmPassword"
        InputType="@PasswordInputConfirm"
        Required="true"
        Adornment="Adornment.End"
        AdornmentIcon="@(_showConfirmPassword ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff)"
        OnAdornmentClick="ToggleConfirmPasswordVisibility" />

        @* <MudTextField Label="Current Password" @bind-Value="currentPassword" Type="password" Required="true" />
        <MudTextField Label="New Password" @bind-Value="newPassword" Type="password" Required="true" />
        <MudTextField Label="Confirm New Password" @bind-Value="confirmPassword" Type="password" Required="true" /> *@
        <MudText Color="MudBlazor.Color.Error" Typo="Typo.body2">@errorMessage</MudText>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="ChangePassword" Color="Color.Primary">Change</MudButton>
        <MudButton OnClick="Cancel" Color="Color.Secondary">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private string currentPassword;
    private string newPassword;
    private string confirmPassword;
    private string errorMessage;
    private string userEmail;

    private bool _showCurrentPassword = false;
    private bool _showNewPassword = false;
    private bool _showConfirmPassword = false;

    InputType PasswordInputCurrent = InputType.Password;
    InputType PasswordInputNew = InputType.Password;
    InputType PasswordInputConfirm = InputType.Password;

    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            userEmail = user.FindFirst(c => c.Type == System.Security.Claims.ClaimTypes.Email)?.Value ?? string.Empty;
        }
    }

    private async Task ChangePassword()
    {
        if (newPassword != confirmPassword)
        {
            errorMessage = "New passwords do not match.";
            return;
        }

        var model = new ChangePasswordDTO
            {
                EmailAddress = userEmail,
                CurrentPassword = currentPassword,
                NewPassword = newPassword
            };

        var response = await accountService.ChangePasswordAsync(model);

        if (response.Flag)
        {
            Snackbar.Add("Password changed successfully!", Severity.Success);
            MudDialog.Close();
        }
        else
        {
            errorMessage = response.Message;
        }
    }

    private void Cancel() => MudDialog.Cancel();

    // private void ToggleCurrentPasswordVisibility() => _showCurrentPassword = !_showCurrentPassword;
    private void ToggleCurrentPasswordVisibility()
    {
        _showCurrentPassword = !_showCurrentPassword;
        if (_showCurrentPassword)
        {
            PasswordInputCurrent = InputType.Text;
        }
        else
        {
            PasswordInputCurrent = InputType.Password;
        }
    }

    // private void ToggleNewPasswordVisibility() => _showNewPassword = !_showNewPassword;
    private void ToggleNewPasswordVisibility()
    {
        _showNewPassword = !_showNewPassword;
        if (_showNewPassword)
        {
            PasswordInputNew = InputType.Text;
        }
        else
        {
            PasswordInputNew = InputType.Password;
        }
    }

    // private void ToggleConfirmPasswordVisibility() => _showConfirmPassword = !_showConfirmPassword;
    private void ToggleConfirmPasswordVisibility()
    {
        _showConfirmPassword = !_showConfirmPassword;
        if (_showConfirmPassword)
        {
            PasswordInputConfirm = InputType.Text;
        }
        else
        {
            PasswordInputConfirm = InputType.Password;
        }
    }
}
